{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE DataKinds #-}

{-# OPTIONS_GHC -fplugin GHC.TypeLits.KnownNat.Solver #-}

module Factorization.Modular where

import Prelude hiding (rem, quot, gcd)
import Algebra.AlgebraicHierarchy
import Poly.Polynomial hiding (X,f)
import Poly.MonomialOrder
import Poly.PolDivision
import Poly.Derivate
import Data.List
import Factorization.Kronecker (content)
import Factorization.Berlekamp 
import Mod.Integer hiding (xs)
import Data.Proxy
import GHC.TypeLits
import System.Random
import EuclideanAlgorithm.Euclid

-- Primitive part

pp :: forall v. (Ord v, OnlyOne v) => Polynomial Integer v GradedLex -> Polynomial Integer v GradedLex
pp f = mapCoef (`quot` (content f)) f

-- Special unmod (in order to have negative numbers)

unMod' :: forall n. (KnownNat n) => IntegerMod n -> Integer
unMod' (Mod x) = if x <= nval `quot` 2 then x else x - nval
  where
    nval = natVal (Proxy :: Proxy n)

-- Mignotte Bounds

quadraticNorm :: (Ord v, OnlyOne v) => Polynomial Integer v GradedLex -> Double
quadraticNorm f = sqrt $ fromIntegral $ ringSum $ map (\x -> x*x) $ coefficients f

mignotteBound :: (Ord v, OnlyOne v) => Integer -> Polynomial Integer v GradedLex -> Integer
mignotteBound p f = head [exp | exp <- [0..], p <^^> (2 ^ exp) >= lowerBound]
  where
    lowerBound = ceiling $  (2 <^^> degree f) * quadraticNorm f


-- Hensell lifting
-- We dont check that conditions are fullfilled, we assume them
hensel :: forall v. (Ord v, OnlyOne v)
        => (Integer, Polynomial Integer v GradedLex, Polynomial Integer v GradedLex,
            Polynomial Integer v GradedLex,Polynomial Integer v GradedLex,Polynomial Integer v GradedLex)
        -> (Integer, Polynomial Integer v GradedLex, Polynomial Integer v GradedLex,
            Polynomial Integer v GradedLex,Polynomial Integer v GradedLex,Polynomial Integer v GradedLex)
hensel (q, f, g, h, s, t) = (newq, f, newg, newh, news, newt)
  where
    newq = q <^^> 2
    delta = f <-> (g <.> h)
    newg = mapCoef modHensel $ (g <.> (one <+> ((s <.> delta) `quotMonic` h))) <+> (t <.> delta)
    newh = mapCoef modHensel $ h <+> ((s <.> delta) `remMonic` h)
    del = mapCoef modHensel $ ((s <.> newg) <+> (t <.> newh)) <-> one
    news = mapCoef modHensel $ s <-> ((s <.> del) `remMonic` newh)
    newt = mapCoef modHensel $ ((one <-> del) <.> t) <-> (newg <.> ((s <.> del) `quotMonic` h))

    modHensel :: Integer -> Integer
    modHensel x = if xmod <= newq `quot` 2 then xmod else xmod - newq
      where
        xmod = x `mod` newq

--------------------------------------------------------------------------------------
-- Algorithm

-- First step, finding the prime

isSqFree :: forall v p. (Ord v, OnlyOne v, KnownNat p) => Polynomial Integer v GradedLex
         -> Proxy p -> Bool
isSqFree f proxy = barf' /= zero && gcd barf barf' == one
  where
    barf = mapCoef toMod f :: Polynomial (IntegerMod p) v GradedLex
    barf' = deriv barf var
  

isPrime :: Integer -> Bool
isPrime n = null [x | x <- [2.. n `quot` 2], n `rem` x == 0]

findPrime :: forall v g. (Ord v, OnlyOne v, StdGen g) => g -> Polynomial Integer v GradedLex -> Integer
findPrime gen f = head [

---------------------------- PRUEBAS

f :: Polynomial Integer X GradedLex
f = ringSum [variable X <^^> 7, constant 2 <.> (variable X <^^> 5),(variable X <^^> 4),constant (-2) <.> (variable X <^^> 3),(variable X <^^> 2),constant (-3) <.> (variable X), constant (-3)]
